#!/bin/bash

#@Author    FriedBob
#@Date      2014.9.24
#@Version   0.1.1
#@Namespace friedbob_scripts

__SBT_SHUTUP='true'
__SBT_VERBOSE='false'

BIN_DIR="$(dirname $(readlink -f "${BASH_SOURCE}"))"
. "${BIN_DIR}/../lib/sbt_libs.sh"

#Need to determine the path for Puppet, rather than hardcoding the PE path
declare -r PUPPET_BIN="$(which puppet)"
declare    USER_NAME="puppet"
declare    ENTERPRISE='false'
if [[ $("${PUPPET_BIN}" --version) =~ "Enterprise" ]]; then
  USER_NAME="peadmin"
  ENTERPRISE='true'
fi

declare -r LONG_OPTS="help,yaml,user:,json,debug,filebase:"
declare -r SHORT_OPTS="hyu:jdf:"
declare -r FILE_BASE="."

usage="$(basename "${0}") [-h] [-f path] [-u user] [-y] [-j] [-d]

where:

- -h or --help
  - Description: Outputs usage information
- -u <username> or --user <username>
  - Default: peadmin for Puppet Enterprise
  - Default: puppet for Puppet Open Source
  - Description: The username to use when using mcollective as a fact source
- -y or --yaml
  - Description: Use <clientcertname>.yaml as the fact source.
- -j or --json
  - Description: Use <clientcertname>.json as the fact source.
- -d or --debug
  - Description: Enable the --debug flag when calling hiera.
- -f <path> or --filebase <path>
  - Default: .
  - Description: The path to be prepended to <clientcertname>.[yaml|json] when doing filebased fact source is used.

Note that only one of json, user or yaml can be specified."

if (( $# == 0 )); then
  fact_src="user"
else
  mutex_option='false'
  while core_getopts "${SHORT_OPTS}" opt "${LONG_OPTS}" "$@"; do
    case "${opt}" in
      h | help ) echo "${usage}"; exit 0;;
      f | filebase ) FILE_BASE="${OPTARG}";;
      u | user )
        if ${mutex_option}; then echo "Please set only one of user, yaml or json options."; exit 1; fi
        mutex_option='true'
        fact_src="user"
        hiera_extra_opts="${hiera_extra_opts} -m";;
      y | yaml )
        if ${mutex_option}; then echo "Please set only one of user, yaml or json options."; exit 1; fi
        mutex_option='true'
        fact_src="yaml"
        hiera_extra_opts="${hiera_extra_opts} -y ${OPTARG}";;
      j | json )
        if ${mutex_option}; then echo "Please set only one of user, yaml or json options."; exit 1; fi
        mutex_option='true'
        fact_src="json"
        hiera_extra_opts="${hiera_extra_opts} -j" ;;
      d | debug ) hiera_extra_opts="${hiera_extra_opts} --debug" ;;
      * ) echo "Unknown option -${OPTARG} (${opt})" >&2 ;;
    esac
  done
fi

#Need the configdir
declare -r CONFIGDIR="$("${PUPPET_BIN}" config print confdir 2> /dev/null)"

# Need to determine if we are using directory environments or config eviron
declare -r ENVIRONMENTPATH="$("${PUPPET_BIN}" config print environmentpath 2> /dev/null)"
declare -r BASEMODULEPATH="$("${PUPPET_BIN}" config print basemodulepath 2> /dev/null)"

if [ "${ENVIRONMENTPATH}" == '']; then #config directories are in play
  if grep -qe  "modulepath.*[$][::]\?environment" "${CONFIGDIR}/puppet.conf"; then # Dynamic Environments
    modulelist=""
    for m in $(grep -P  '^[\s]*modulepath' "${CONFIGDIR}/puppet.conf" | cut -d'=' -f2 | awk 'BEGIN {RS = ":"} ; {print $0}')
      do
        if grep -P '\$(::)?environment' <<<"${m}" | grep -Po '^[$|/][a-zA-Z/]*'; then
            if [[ "${m}" =~ '$confdir' ]]; then
              kladsjhfiladhfklasjdfghldksj="$(echo ${m} | grep -Po '^[$|/][a-zA-Z/]*')"
              modulelist="${modulelist} ${kladsjhfiladhfklasjdfghldksj/\$confdir/${CONFIGDIR}}"
            else
              modulelist="${modulelist} $(echo ${m} | grep -Po '^[$|/][a-zA-Z/]*')"
            fi
        else
          if [[ "${m}" =~ '$confdir' ]]; then
            modulelist="${modulelist} ${m/\$confdir/${CONFIGDIR}}"
          else
            modulelist="${modulelist} ${m}"
          fi
        fi
      done
  else #Static config directory
    modulelist="$("${PUPPET_BIN}" config print modulepath | sed -e "s/:/ /g")"
  fi
else #Directory environments are being used
  if [[ ${ENVIRONMENTPATH} =~ '$confdir' ]]; then
    mod_ep="${ENVIRONMENTPATH/'$confdir'/${CONFIGDIR}}"
  else
    mod_ep="${ENVIRONMENTPATH}"
  fi
  if [[ ${BASEMODULEPATH} =~ '$confdir' ]]; then
    mod_bmp="${BASEMODULEPATH/'$confdir'/${CONFIGDIR}}"
  else
    mod_bmp="${BASEMODULEPATH}"
  fi
  modulelist="${mod_ep} ${mod_bmp}"
fi

declare -r HIERADIR="$("${PUPPET_BIN}" config print hiera_config 2> /dev/null)"
declare -r CERTLIST_RAW="$("${PUPPET_BIN}" cert list --all 2> /dev/null | grep -Pho "(?<=\+ \")([a-z0-9-_.]+)")"
declare    CERTLIST=""
declare -r VARLIST="$(grep -Pho "(?<=%\{)(.+)(?=\})" ${HIERADIR})"
#Still need to account for automatic parameter lookups
declare -r HIERA_LIST="$(for h in ${modulelist}; do grep -PIRho "(?<=hiera\(['|\"|$])([^'|^\"|^,|^\)]+)" ${h} | sort -u; done)"
declare -r HIERA_A_LIST="$(for ha in ${modulelist}; do grep -PIRho "(?<=hiera_array\(['|\"|$])([^'|^\"|^,|^\)]+)" ${ha} | sort -u; done)"
declare -r HIERA_H_LIST="$(for hh in ${modulelist}; do grep -PIRho "(?<=hiera_hash\(['|\"|$])([^'|^\"|^,|^\)]+)" ${hh} | sort -u; done)"
declare -r HIERA_BASE_OPTS="-c ${HIERADIR}"
declare -r HIERA="$(which hiera)"
declare -r HIERA_BASE_CMD="${HIERA} ${HIERA_BASE_OPTS}"
declare    HIERA_CMD="${HIERA_BASE_CMD} ${HIERA_EXTRA_OPTS}"

for cert in ${CERTLIST_RAW}; do
  if [ "${cert}" == "${cert/pe-internal-/}" ]; then CERTLIST="${CERTLIST} ${cert}"; fi
done

if [ "${fact_src}" == 'yaml' ]; then
  for node in ${CERTLIST}; do
    if [ -f "${node}.yaml" ]; then
      echo "Looking up hiera() call values for ${node}."
      for ch in ${HIERA_LIST} ; do ${HIERA_CMD} "${FILE_BASE}/${node}.yaml" "${ch}"; done
      echo "Looking up hiera_array() call values for ${node}."
      for cha in ${HIERA_A_LIST} ; do ${HIERA_CMD} "${FILE_BASE}/${node}.yaml" -a "${cha}"; done
      echo "Looking up hiera_hash() call values for ${node}."
      for chh in ${HIERA_H_LIST} ; do ${HIERA_BASE_CMD} "${FILE_BASE}/${node}.yaml" -h "${chh}"; done
    else
      echo "Warning, could not find ${node}.yaml. Skipping."
    fi
  done
elif [ "${fact_src}" == 'json' ]; then
  for node in ${CERTLIST}; do
    if [ -f "${node}.json" ]; then
      echo "Looking up hiera() call values for ${node}."
      for ch in ${HIERA_LIST} ; do ${HIERA_CMD} "${FILE_BASE}/${node}.json" "${ch}"; done
      echo "Looking up hiera_array() call values for ${node}."
      for cha in ${HIERA_A_LIST} ; do ${HIERA__CMD} "${FILE_BASE}/${node}.json" -a "${cha}"; done
      echo "Looking up hiera_hash() call values for ${node}."
      for chh in ${HIERA_H_LIST} ; do ${HIERA_BASE_CMD} "${FILE_BASE}/${node}.json" -h "${chh}"; done
    else
      echo "Warning, could not find ${node}.json. Skipping."
    fi
  done
elif [ "${fact_src}" == 'user' ]; then
  if $(grep -qF "${USER_NAME}" /etc/passwd); then
    HIERA_CMD="sudo -u ${USER_NAME} ${HIERA} ${hiera_extra_opts} ${HIERA_BASE_OPTS}"
  else
    echo "User '${USER_NAME}' not found. Please check spelling. Exiting."
    exit 1
  fi
  for node in ${CERTLIST}; do
    echo "Looking up hiera() call values for ${node}."
    for ch in ${HIERA_LIST} ; do echo "${ch} is $( ${HIERA_CMD} -m "${node}" "${ch}")"; done
    echo "Looking up hiera_array() call values for ${node}."
    for cha in ${HIERA_A_LIST} ; do echo "${cha} is $( ${HIERA_CMD} -a -m "${node}" "${cha}")"; done
    echo "Looking up hiera_hash() call values for ${node}."
    for chh in ${HIERA_H_LIST} ; do echo "${chh} is $( ${HIERA_CMD} -h -m "${node}" "${chh}")"; done
  done
else
  echo "Unknown fact source. Exiting."
  exit 1
fi
