#!/bin/bash

#@Author    FriedBob
#@Date      2014.9.24
#@Version   0.3.0
#@Namespace friedbob_scripts

declare -r -i E_OK=0
declare -r -i E_GENERIC_FAILURE=1
declare       __SBT_SHUTUP='true'
declare       __SBT_VERBOSE='false'
declare -r    BIN_DIR="$(dirname $(readlink -f "${BASH_SOURCE}"))"
. "${BIN_DIR}/../lib/sbt_libs.sh"

# Create a function for usage... because the original multi-line variable scares me...
function usage {
  # Switching away from multi-line by building the variable here.
  local msg="\n$(basename "${0}") [-h] [-f path] [-u user] [-y] [-j] [-k key] [-d] [-a]"
        msg+="\n"
        msg+="\nwhere:"
        msg+="\n"
        msg+="\n- --help"
        msg+="\n  - Description: Outputs usage information"
        msg+="\n- -u <username> or --user <username>"
        msg+="\n  - Default: peadmin for Puppet Enterprise"
        msg+="\n  - Default: puppet for Puppet Open Source"
        msg+="\n  - Description: The username to use when using mcollective as a fact source"
        msg+="\n- -y or --yaml"
        msg+="\n  - Description: Use <clientcertname>.yaml as the fact source."
        msg+="\n- -j or --json"
        msg+="\n  - Description: Use <clientcertname>.json as the fact source."
        msg+="\n- -k or --key"
        msg+="\n  - Description: Look up the <key> as it is seen on all nodes."
        msg+="\n- -d or --debug"
        msg+="\n  - Description: Enable the --debug flag when calling hiera."
        msg+="\n- -f <path> or --filebase <path>"
        msg+="\n  - Default: ."
        msg+="\n  - Description: The path to be prepended to <clientcertname>.[yaml|json] when doing filebased fact source is used."
        msg+="\n- -mode <mode>"
        msg+="\n  - Default: all"
        msg+="\n  - Description: What type of lookup to perform."
        msg+="\n  - Acceptable Values: all, priority, array, hash"
        msg+="\n"
        msg+="\nNote that only one of json, user or yaml can be specified."

  echo -e "${msg}"
  return ${E_OK}
}

function fail_sauce {
  # Wrapper to echo $* out (using $* to mash all words together).
  echo -e "$*"
  exit ${E_GENERIC_FAILURE}
  return ${E_OK}  # This will never be hit.
}

#Need to determine the path for Puppet, rather than hardcoding the PE path
declare -r PUPPET_BIN="$(which puppet)"
declare    USER_NAME="puppet"
declare    ENTERPRISE='false'
if [[ $("${PUPPET_BIN}" --version) =~ "Enterprise" ]]; then
  USER_NAME="peadmin"
  ENTERPRISE='true'
fi

declare -r LONG_OPTS="help,yaml,user:,json,debug,filebase:,key:,mode:,node:"
declare -r SHORT_OPTS="hyu:jdf:k:m:n:"
declare -r FILE_BASE="."
declare    fact_src="user"
declare    key_name=''
declare    node_name=''
declare    singlekey='false'
declare    lookuptype='all'

if [ $# -gt 0 ]; then
  mutex_option='false'
  mutex_mode='false'
  while core_getopts "${SHORT_OPTS}" opt "${LONG_OPTS}" "$@"; do
    case "${opt}" in
      h | help ) usage; exit 0;;
      f | filebase ) FILE_BASE="${OPTARG}";;
      u | user )
        ${mutex_option} && fail_sauce "Please set only one of user, yaml or json options."
        mutex_option='true'
        fact_src="user"
        hiera_extra_opts="${hiera_extra_opts} -m";;
      y | yaml )
        ${mutex_option} && fail_sauce "Please set only one of user, yaml or json options."
        mutex_option='true'
        fact_src="yaml"
        hiera_extra_opts="${hiera_extra_opts} -y ${OPTARG}";;
      j | json )
        ${mutex_option} && fail_sauce "Please set only one of user, yaml or json options."
        mutex_option='true'
        fact_src="json"
        hiera_extra_opts="${hiera_extra_opts} -j" ;;
      d | debug ) hiera_extra_opts="${hiera_extra_opts} --debug" ;;
      k | key ) 
        keyname="${OPTARG}"
        [[ -n "${keyname}" ]] || fail_sauce "Keyname is required for --key."
        singlekey='true' ;;
      m | mode )
        case "${OPTARG}" in
          'priority')
            lookuptype='priority';;
          'array')
            lookuptype='array';;
          'hash')
            lookuptype='hash';;
          'all')
            lookuptype='all';;
        esac
      ;;
      n | node )
        nodename="${OPTARG}"
        [[ -n nodename ]] || fail_sauce "Node name is required for --node.";;
      * ) echo "Unknown option -${OPTARG} (${opt})" >&2 ;;
    esac
  done
fi

#Need the configdir
declare -r CONFIGDIR="$("${PUPPET_BIN}" config print confdir 2> /dev/null)"

# Need to determine if we are using directory environments or config eviron
declare -r ENVIRONMENTPATH="$("${PUPPET_BIN}" config print environmentpath 2> /dev/null)"
declare -r BASEMODULEPATH="$("${PUPPET_BIN}" config print basemodulepath 2> /dev/null)"

# Assume directory environments are being used; we'll check for an empty $ENVIRONMENTPATH next and reset as-needed.
mod_ep="${ENVIRONMENTPATH}"
mod_bmp="${BASEMODULEPATH}"
[[ ${ENVIRONMENTPATH} =~ '$confdir' ]] && mod_ep="${ENVIRONMENTPATH/'$confdir'/${CONFIGDIR}}"
[[ ${BASEMODULEPATH} =~ '$confdir' ]]  && mod_bmp="${BASEMODULEPATH/'$confdir'/${CONFIGDIR}}"
modulelist="${mod_ep} ${mod_bmp}"
# -- This is our check for config directories in play, rather than directory environments.
if [ "${ENVIRONMENTPATH}" == '' ]; then #config directories are in play
  modulelist="$("${PUPPET_BIN}" config print modulepath | sed -e "s/:/ /g")"       # Assume static config directory (overwriting from above).
  if grep -qe  "modulepath.*[$][::]\?environment" "${CONFIGDIR}/puppet.conf"; then # Dynamic Environments, reset modulelist for compilation below.
    modulelist=""
    for m in $(grep -P  '^[\s]*modulepath' "${CONFIGDIR}/puppet.conf" | cut -d'=' -f2 | awk 'BEGIN {RS = ":"} ; {print $0}') ; do
      if grep -P '\$(::)?environment' <<<"${m}" | grep -Po '^[$|/][a-zA-Z/]*'; then
        if [[ "${m}" =~ '$confdir' ]]; then
          kladsjhfiladhfklasjdfghldksj="$(echo ${m} | grep -Po '^[$|/][a-zA-Z/]*')"
          modulelist="${modulelist} ${kladsjhfiladhfklasjdfghldksj/\$confdir/${CONFIGDIR}}"
        else
          modulelist="${modulelist} $(echo ${m} | grep -Po '^[$|/][a-zA-Z/]*')"
        fi
      else
        if [[ "${m}" =~ '$confdir' ]]; then
          modulelist="${modulelist} ${m/\$confdir/${CONFIGDIR}}"
        else
          modulelist="${modulelist} ${m}"
        fi
      fi
    done
  fi
fi

declare -r HIERADIR="$("${PUPPET_BIN}" config print hiera_config 2> /dev/null)"
declare -r CERTLIST_RAW="$("${PUPPET_BIN}" cert list --all 2> /dev/null | grep -Pho "(?<=\+ \")([a-z0-9-_.]+)")"
declare    CERTLIST=""
declare -r VARLIST="$(grep -Pho "(?<=%\{)(.+)(?=\})" ${HIERADIR})"

if [[ singlekey == 'true' ]]; then
  HIERA_LIST=( "${key_name}" )
  HIERA_A_LIST=( "${key_name}" )
  HIERA_H_LIST=( "${key_name}" )
  HIERA_P_LIST=( "${key_name}" )
else
  if [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
    px=0
    for p in $(find / -name "*.pp" -exec awk -f ${BIN_DIR}/findparams.awk {} \;); do
      HIERA_P_LIST[px]=$p
      ((px++))
    done
    HIERA_LIST="$(for h in ${modulelist}; do grep -PIRho "(?<=hiera\(['|\"|$])([^'|^\"|^,|^\)]+)" ${h} | sort -u; done)"
  elif [[ lookuptype -eq 'all' ]] || [[ lookuptype -eq 'array' ]]; then
    HIERA_A_LIST="$(for ha in ${modulelist}; do grep -PIRho "(?<=hiera_array\(['|\"|$])([^'|^\"|^,|^\)]+)" ${ha} | sort -u; done)"
  elif [[ lookuptype -eq 'all' ]] || [[ lookuptype -eq 'hash' ]]; then
    HIERA_H_LIST="$(for hh in ${modulelist}; do grep -PIRho "(?<=hiera_hash\(['|\"|$])([^'|^\"|^,|^\)]+)" ${hh} | sort -u; done)"
  fi
fi

declare -r HIERA_BASE_OPTS="-c ${HIERADIR}"
declare -r HIERA="$(which hiera)"
declare -r HIERA_BASE_CMD="${HIERA} ${HIERA_BASE_OPTS}"
declare    HIERA_CMD="${HIERA_BASE_CMD} ${HIERA_EXTRA_OPTS}"

if [[ singlenode == 'true' ]] ; then 
  CERTLIST=( "${nodename}" )
else
  for cert in ${CERTLIST_RAW}; do [ "${cert}" == "${cert/pe-internal-/}" ] && CERTLIST="${CERTLIST} ${cert}" ; done
fi

case "${fact_src}" in
  'yaml' | 'json' )
    for node in ${CERTLIST}; do
      if [ ! -f "${node}.${fact_src}" ] ; then echo "Warning, could not find ${node}.${fact_src}.  Skipping." ; continue 1 ; fi
      if [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up hiera() call values."
        for ch in ${HIERA_LIST} ; do echo "${ch} is $(${HIERA_CMD} ${FILE_BASE}/${nodename}.${fact_src} ${ch})"; done
        echo "Looking up automatic parameter lookups."
        for ch in ${HIERA_P_LIST} ; do echo "${ch} is $(${HIERA_CMD} ${FILE_BASE}/${nodename}.${fact_src} ${ch})"; done
      elif [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up hiera_array() call values."
        for ch in ${HIERA_A_LIST} ; do echo "${ch} is $(${HIERA_CMD} ${FILE_BASE}/${nodename}.${fact_src} ${ch})"; done
      elif [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up hiera_hash() call values."
        for ch in ${HIERA_H_LIST} ; do echo "${ch} is $(${HIERA_CMD} ${FILE_BASE}/${nodename}.${fact_src} ${ch})"; done
      fi
    done
    ;;
  'user' )
    HIERA_CMD="sudo -u ${USER_NAME} ${HIERA} ${hiera_extra_opts} ${HIERA_BASE_OPTS}"
    grep -qF "${USER_NAME}" /etc/passwd || fail_sauce "User '${USER_NAME}' not found. Please check spelling. Exiting."
    for node in ${CERTLIST}; do
      if [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up hiera() call values for ${node}."
        for ch in ${HIERA_LIST} ; do echo "${ch} is $( ${HIERA_CMD} -m ${node} ${ch})"; done
      elif [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up hiera_array() call values for ${node}."
        for cha in ${HIERA_A_LIST} ; do echo "${cha} is $( ${HIERA_CMD} -a -m ${node} ${cha})"; done
      elif [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up hiera_hash() call values for ${node}."
        for chh in ${HIERA_H_LIST} ; do echo "${chh} is $( ${HIERA_CMD} -h -m ${node} ${chh})"; done
      elif [[ lookuptype == 'all' ]] || [[ lookuptype == 'priority' ]]; then
        echo "Looking up automatica paramater values for ${node}."
        for chp in ${HIERA_P_LIST[@]} ; do echo "${chp} is $(${HIERA_CMD} -m ${node} ${chp})"; done
      fi
    done
    ;;
  * )
    fail_sauce "Unknown fact source '${fact_src}'. Exiting."
    ;;
esac

exit $E_OK
